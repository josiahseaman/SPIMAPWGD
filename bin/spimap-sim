#/s/python-2.7.1/lib/python2.7/
#
# SPIMAP
# Matt Rasmussen 2010-2011
#
# Simulate a gene trees from the SPIMAP model (dup,loss,substitution rates)
#


#=============================================================================
# python libs
import sys, time, os, random, math, copy, optparse
from os.path import realpath, dirname, join

# spidir libs
try:
    import spidir
except:
    sys.path.append(join(realpath(dirname(dirname(__file__))), "python"))
    import spidir

# rasmus libs
from rasmus import treelib
from rasmus import util
from rasmus import stats

# compbio libs
from compbio import fasta, phylo, birthdeath


#=============================================================================
# options

o = optparse.OptionParser()
o.set_defaults()

o.add_option("-s", "--stree", dest="stree",
             metavar="<species tree newick file>")
o.add_option("-p", "--params", dest="params", metavar="<params>")
o.add_option("-g", "--generate", dest="generate", metavar="<gene rate>",
             default=None, type="float")
o.add_option("", "--generatefunc", dest="generatefunc",
             metavar="<gene rate function>",
             default="invgamma")
o.add_option("-l", "--genelen", dest="genelen",
             metavar="<gene length in base pairs>",
             default=1000,
             type="int")
o.add_option("--genelenprobs=", dest="genelenprobs",
             metavar="<gene length distribution>")

o.add_option("-r", "--tsvratio", dest="tsvratio",
             metavar="<transition/transversion ratio>",
             default=1.0,
             type="float")
o.add_option("-b", "--bgfreq", dest="bgfreq", metavar="<A>,<C>,<G>,<T>")
o.add_option("-m", "--minsize", dest="minsize",
             metavar="<min # of genes per tree>",
             type="int",
             default=4)
o.add_option("-M", "--maxsize", dest="maxsize",
             metavar="<max # of genes per tree>",
             type="int",
             default=util.INF)
o.add_option("-D", "--duprate", dest="duprate", metavar="<duplication rate>",
             default=0.0000002,
             type="float")
o.add_option("-L", "--lossrate=", dest="lossrate", metavar="<loss rate>",
             default=0.0000001,
             type="float")

o.add_option("-n", "--ntrees", dest="ntrees",
             metavar="<number of trees to produce>",
             default=1,
             type="int")
o.add_option("--start", dest="start", metavar="<starting number>",
             default=0,
             type="int")
o.add_option("--nospecrates", dest="nospecrates",
             action="store_true",
             help="do not use species rates")


o.add_option("-O", "--outtree", dest="outtree", metavar="<output directory>",
             default="./")

o.add_option("-T", "--outtreeext", dest="outtreeext",
             metavar="<output tree extension>",
             default=".tree")
o.add_option("-A", "--outalignext", dest="outalignext",
             metavar="<output align extension>",
             default=".align")
o.add_option("-F", "--outseqext", dest="outseqext",
             metavar="<output sequence FASTA extension>",
             default=".fasta")
o.add_option("-I", "--outinfoext", dest="outinfoext",
             metavar="<output information extenstion>",
             default=".info.txt")
o.add_option("--nodir", dest="nodir",
             action="store_true",
             help="do not create sub-directories")
o.add_option("", "--resume", dest="resume",
             action="store_true")


conf, args = o.parse_args()
if len(sys.argv) == 1:
    o.print_help()
    sys.exit(1)


#=============================================================================

def parse_bg_freq(txt):
    return map(float, txt.split(","))



def gene2species(gene):
    return gene.split("_")[0]


def sim_tree(stree, params, duprate, lossrate, generate, use_spec,
             minsize=4,
             maxsize=util.INF,
             infofile=sys.stdout,
             generatefunc="invgamma"):
    """simulate one tree"""

    while True:
    
        # create gene tree using birth death model
        tree, recon, events = birthdeath.sample_birth_death_gene_tree(
            stree, duprate, lossrate, removeloss=False)

        pretree = tree.copy()
        prerecon = copy.copy(recon)
        preevents = copy.copy(events)
        remove_losses(tree, recon, events)

        # try again if there is total extinction
        if not (minsize <= len(tree.leaves()) <= maxsize):
            infofile.write("tree wrong size. size: %d\n" % len(tree.nodes))
            if len(tree.nodes) == 0:
                infofile.write("extinction\n")
        else:
            break

    # determine gene rate
    if generate is None:
        # randomly sample gene rate
        if generatefunc == "gamma":
            generate = random.gammavariate(params["baserate"][0],
                                           1.0 / params["baserate"][1])
        elif generatefunc == "invgamma":
            generate = 1.0 / random.gammavariate(params["baserate"][0],
                                                 1.0 / params["baserate"][1])
        else:
            raise Exception("unknown gene rate function '%s'" % generatefunc)
    
    for node in tree:
        if node == tree.root:
            continue
        if use_spec:
            node.dist = sim_branch_len(node.dist, generate, 
                                       params[recon[node].name])
        else:
            node.dist *= generate
    
    # trim recon and events structures to only remaining nodes
    doomed = remove_losses(tree, recon, events)
    

    # write info file
    infofile.write("gene rate: %f\n" % generate)    
    infofile.write("doomed: %d\n" % doomed)
    
    recon2 = phylo.reconcile(tree, stree, gene2species)
    infofile.write("parsimonious reconciliation: %s\n" % str(recon2 == recon))

    
    # rename doomed leaves
    for node in pretree.leaves():
        if isinstance(node.name, int):
            pretree.rename(node.name, "doom_%d" % node.name)
    
    return pretree, tree



def sim_seq(tree, seqlen=999,
            tsvratio=1.0, bgfreq=[.25, .25, .25, .25]):
    """simulate the evolution of a sequence down a tree"""
    
    bases = "ACGT"

    # make root sequence
    rootseq = [bases[stats.sample(bgfreq)]
               for i in xrange(seqlen)]

    # final sequences
    seqs = fasta.FastaDict()

    # evolve sequences down tree
    def walk(node, seq):
        if node.is_leaf():
            # save sequence
            seqs[node.name] = seq

        # recurse
        for child in node.children:
            seq2 = sim_seq_branch(seq, child.dist, bgfreq, tsvratio)
            walk(child, seq2)        
    walk(tree.root, rootseq)

    return seqs

    
    
    

def sim_seq_branch(seq, time, bgfreq, tsvratio):
    """Simulate sequence evolving down one branch"""
    
    matrix = spidir.make_hky_matrix(bgfreq, tsvratio, time)
    bases = "ACGT"
    lookup = {"A": 0,
              "C": 1,
              "G": 2,
              "T": 3}

    seq2 = []
    for a in seq:
        seq2.append(bases[stats.sample(matrix[lookup[a]])])

    return "".join(seq2)



def remove_losses(tree, recon, events):
    keep = [x for x in tree.leaves() if isinstance(x.name, str)]
    
    nnodes = len(tree.nodes)
    treelib.remove_exposed_internal_nodes(tree, keep)
    doomed = nnodes - len(tree.nodes)
    
    treelib.remove_single_children(tree)
    
    delnodes = set()
    for node in recon:
        if node.name not in tree.nodes:
            delnodes.add(node)
    for node in delnodes:
        del recon[node]
        del events[node]
    
    return doomed


def sim_branch_len(time, gene_rate, sp_rate):
    """simulate one branch length"""
    
    alpha, beta = sp_rate
    return gene_rate * time * random.gammavariate(alpha, 1/beta)


def list2str(lst):
    return "[" + ",".join(map(str, lst)) + "]"



#=============================================================================
# main function

def main(conf):
    # read configuration    
    stree = treelib.readTree(conf.stree)
    
    if conf.params:
        params = spidir.read_params(conf.params)                
    else:
        params = None
        
    if conf.generate:
        generate = conf.generate
    else:
        generate = None
    

    if conf.bgfreq:
        conf.bgfreq = parse_bg_freq(conf.bgfreq)
    else:
        conf.bgfreq = [.25, .25, .25, .25]

    # don't let duprate exactly equal lossrate
    if conf.duprate == conf.lossrate:
        conf.lossrate *= .98
        
    
    # simulate
    util.tic("simulating %d trees" % conf.ntrees)
    for i in range(conf.start, conf.ntrees):
        # setup output directory
        if conf.nodir:
            dirname = conf.outtree
        else:
            dirname = os.path.join(conf.outtree, str(i))
            if not os.path.exists(dirname):
                os.makedirs(dirname)
            elif conf.resume:
                # skip families that already exist
                continue

        util.logger("simulating", i)
        
        # open information file
        infofilename = os.path.join(dirname, str(i) + conf.outinfoext)
        infofile = open(infofilename, "w")                    
        
        # create tree and write it
        pretree, tree = sim_tree(stree, params, conf.duprate,
                                 conf.lossrate, 
                                 generate,
                                 not conf.nospecrates,
                                 infofile=infofile,
                                 minsize=conf.minsize,
                                 maxsize=conf.maxsize,
                                 generatefunc=conf.generatefunc)
        pretree.write(os.path.join(dirname, str(i) + ".times" +
                                   conf.outtreeext))
        tree.write(os.path.join(dirname, str(i) + conf.outtreeext))
        
        # create sequence for tree
        if conf.genelenprobs:
            genelen = stats.sample(util.readFloats(conf.genelenprobs))
        else:
            genelen = conf.genelen
        
        outfile = os.path.join(dirname, str(i))
        align = sim_seq(tree, seqlen=genelen, 
                        tsvratio=conf.tsvratio, bgfreq=conf.bgfreq)
        
        # write sequence output
        align.write(outfile + conf.outseqext)
        align.write(outfile + conf.outalignext)

        infofile.close()
    util.toc()

main(conf)

