#!/usr/bin/env python
#
# SPIMAP
# Matt Rasmussen 2010-2011
#
# Train the SPIMAP dup/loss rates model from a gene count matrix
#

#=============================================================================
# python libs
import sys, optparse
from math import log, exp
from os.path import realpath, dirname, join

# spidir libs
try:
    import spidir
except:
    sys.path.append(join(realpath(dirname(dirname(__file__))), "python"))
    import spidir

# rasmus libs
from rasmus import util, treelib, plotting

# compbio libs
from compbio import phylo

#=============================================================================
# options

o = optparse.OptionParser()
o.set_defaults()

o.add_option("-s", "--stree", dest="stree",
             metavar="<species tree newick file>")
o.add_option("-S", "--smap", dest="smap",
             metavar="<gene to species file>")
o.add_option("-c", "--countmatrix", dest="countmatrix",
             metavar="<gene count matrix output file>")
o.add_option("", "--maxgene", dest="maxgene", type="int",
             default=20, metavar="<maximum number of genes in ancestor>")

o.add_option("", "--maxiter", dest="maxiter", type="int",
             default=100, metavar="<maximum number of ML iterations>")
o.add_option("", "--birth", dest="birth_init", type="float",
             default=.1, metavar="<initial birth rate>")
o.add_option("", "--death", dest="death_init", type="float",
             default=.1, metavar="<initial death rate>")
o.add_option("", "--step", dest="step", type="float",
             default=1.0, metavar="<initial step size>")


o.add_option("-r", "--range", dest="range",
             metavar="<start>,<step>,<stop>")
o.add_option("-H", "--heatmap", dest="heatmap",
             default="duploss",
             metavar="<heatmap file>")


#=============================================================================

def error(message, exit=1):
    print >>sys.stderr, message
    sys.exit(exit)


def main(conf, args):

    # TODO: make more checks
    if conf.stree is None or conf.smap is None:
        error("error: must specify species tree and mapping")


    # read in species data
    stree = treelib.read_tree(conf.stree)
    gene2species = phylo.read_gene2species(conf.smap)

    infile = open(conf.countmatrix)
    species = infile.next().rstrip().split("\t")

    # read all counts
    counts = [map(int, line.rstrip().split("\t"))
              for line in infile]

    top = max(map(max, counts))
    conf.maxgene = max(top*2, conf.maxgene)

    
    if conf.range is not None:
        # make heatmap
        make_heatmap(conf, stree, counts)
    else:
        # estimate ml birth death parameters
        b, d = birth_death_ml(conf, stree, counts)
        print "birth\t%f" % b
        print "death\t%f" % d


def birth_death_ml(conf, stree, counts):

    birth0 = conf.birth_init
    death0 = conf.death_init
    step = conf.step


    scale = sum(node.dist for node in stree)
    for node in stree:
        node.dist /= scale
    birth0 *= scale
    death0 *= scale
    
    opt = spidir.birth_death_counts_ml_alloc(stree, counts,
                                             birth0, death0, step,
                                             maxgene=conf.maxgene)

    for i in range(conf.maxiter):
        status, size, (b,d) = spidir.birth_death_counts_ml_iter(opt)
        print >>sys.stderr, "b=%f\td=%f\tsize=%f" % (b/scale, d/scale, size)
        if status == 0:
            break

    spidir.birth_death_counts_ml_free(opt)

    b /= scale
    d /= scale

    return b, d


def make_heatmap(conf, stree, counts):

    start, step, stop = map(float, conf.range.split(","))
    rates = list(util.frange(start,stop+step*.5,step))

    mat = util.make_matrix(len(rates), len(rates), 0.0)
    
    for i, birth in enumerate(rates):
        for j, death in enumerate(rates):
            l = spidir.birth_death_forest_counts(stree, counts,
                                                 birth, death,
                                                 maxgene=conf.maxgene,
                                                 rootgene=1)
            print >>sys.stderr, birth, death, l
            print birth, death, l

            mat[j][i] = l

    util.write_delim(conf.heatmap + ".txt", util.map2(str, mat))


    if min(rates) >= .01:
        labels = ["%.2f" % x for x in rates]
    else:
        labels = ["%.2e" % x for x in rates]
    high = max(util.flatten(mat))
    
    plotting.heatmap(util.map2(lambda x: exp(x-high), mat),
                     rlabels=labels, clabels=labels,
                     xmargin=100, ymargin=100, ydir=-1,
                     filename=conf.heatmap + ".svg")


conf, args = o.parse_args()
main(conf, args)

